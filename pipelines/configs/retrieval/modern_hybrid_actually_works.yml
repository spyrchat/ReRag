# Modern Hybrid Retrieval Configuration - ACTUALLY WORKS
# Based on actual code implementation in components/retrieval_pipeline.py

description: "Hybrid retrieval with stages that ACTUALLY exist in the codebase"

# ==============================================================================
# RETRIEVAL CONFIGURATION (Root level - required by retrievers)
# ==============================================================================
retrieval:
  type: hybrid
  top_k: 30  # Get more candidates for filtering/reranking
  fusion:
    method: rrf
    alpha: 0.6  # REQUIRED! (0.0=sparse, 1.0=dense)
    rrf_k: 60

# ==============================================================================
# EMBEDDING CONFIGURATION (Root level - required)
# ==============================================================================
embedding:
  strategy: hybrid
  dense:
    provider: google
    model: models/embedding-001
    dimensions: 768
    api_key_env: GOOGLE_API_KEY
    batch_size: 32
  sparse:
    provider: sparse
    model: Qdrant/bm25

# ==============================================================================
# QDRANT CONFIGURATION (Root level - required)
# ==============================================================================
qdrant:
  collection_name: sosum_stackoverflow_hybrid_v1
  dense_vector_name: dense
  sparse_vector_name: sparse

# ==============================================================================
# PIPELINE STAGES - ONLY IMPLEMENTED STAGES
# ==============================================================================
retrieval_pipeline:
  stages:
    # ✅ Stage 1: Score filtering (EXISTS: components/filters.py - ScoreFilter)
    - type: score_filter
      config:
        min_score: 0.01  # Low threshold for RRF scores
    
    # ✅ Stage 2: Duplicate removal (EXISTS: components/filters.py - DuplicateFilter)
    - type: duplicate_filter
      config:
        dedup_by: external_id  # Options: "external_id" or "content"
    
    # ✅ Stage 3: Tag filtering (EXISTS: components/filters.py - TagFilter)
    # - type: tag_filter
    #   config:
    #     required_tags: ["python", "javascript"]  # Only keep these tags
    #     excluded_tags: ["deprecated"]             # Exclude these tags
    
    # ✅ Stage 4: Reranking (EXISTS: components/rerankers.py + advanced_rerankers.py)
    - type: reranker
      config:
        model_type: cross_encoder  # Options: cross_encoder, bge, multistage, ensemble
        model_name: cross-encoder/ms-marco-MiniLM-L-6-v2
        top_k: 15
    
    # ✅ Stage 5: Answer enhancement (EXISTS: components/filters.py - AnswerEnhancer)
    - type: answer_enhancer
      config: {}
    
    # ✅ Stage 6: Final limiting (EXISTS: components/filters.py - ResultLimiter)
    - type: result_limiter
      config:
        max_results: 10

# ==============================================================================
# EVALUATION (Optional - for benchmarking)
# ==============================================================================
evaluation:
  k_values: [1, 3, 5, 10]
  metrics:
    retrieval: ["precision@k", "recall@k", "mrr", "ndcg@k", "f1@k"]

max_queries: 506
experiment_name: "modern_hybrid_verified"

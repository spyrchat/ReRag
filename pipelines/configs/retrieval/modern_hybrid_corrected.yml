# Modern Hybrid Retrieval Configuration - CORRECTED & EXTENDED
# This version actually works with the codebase and includes multiple stages

description: "Advanced hybrid retrieval with multi-stage processing"

# ==============================================================================
# RETRIEVAL CONFIGURATION (Root level - required by retrievers)
# ==============================================================================
retrieval:
  type: hybrid
  top_k: 30  # Get more candidates for multi-stage filtering
  fusion:
    method: rrf
    alpha: 0.6  # REQUIRED! (0.0=sparse, 1.0=dense)
    rrf_k: 60

# ==============================================================================
# EMBEDDING CONFIGURATION (Root level - required)
# ==============================================================================
embedding:
  strategy: hybrid
  dense:
    provider: google
    model: models/embedding-001
    dimensions: 768
    api_key_env: GOOGLE_API_KEY
    batch_size: 32
  sparse:
    provider: sparse
    model: Qdrant/bm25

# ==============================================================================
# QDRANT CONFIGURATION (Root level - required)
# ==============================================================================
qdrant:
  collection_name: sosum_stackoverflow_hybrid_v1
  dense_vector_name: dense
  sparse_vector_name: sparse

# ==============================================================================
# PIPELINE STAGES (Multiple processing stages)
# ==============================================================================
retrieval_pipeline:
  stages:
    # Stage 1: Initial score filtering (reduce noise)
    - type: score_filter
      name: initial_filter
      config:
        min_score: 0.01  # Low threshold for RRF scores
    
    # Stage 2: Remove duplicates
    - type: duplicate_filter
      name: dedup
      config:
        dedup_by: external_id  # or "content"
    
    # Stage 3: First-pass reranking (fast model)
    - type: reranker
      name: fast_reranker
      config:
        model_type: cross_encoder
        model_name: cross-encoder/ms-marco-MiniLM-L-6-v2
        top_k: 20  # Keep top 20 for next stage
    
    # Stage 4: Second-pass reranking (high-quality model)
    - type: reranker
      name: quality_reranker
      config:
        model_type: bge
        model_name: BAAI/bge-reranker-base
        top_k: 15  # Further narrow down
    
    # Stage 5: Answer enhancement (for Stack Overflow content)
    - type: answer_enhancer
      name: enhancer
      config: {}
    
    # Stage 6: Final result limiting
    - type: result_limiter
      name: final_limiter
      config:
        max_results: 10  # Final number of results

# ==============================================================================
# EVALUATION (Optional - for benchmarking)
# ==============================================================================
evaluation:
  k_values: [1, 3, 5, 10]
  metrics:
    retrieval: ["precision@k", "recall@k", "mrr", "ndcg@k", "f1@k"]

# ==============================================================================
# METADATA (Optional)
# ==============================================================================
max_queries: 506
experiment_name: "modern_hybrid_multi_stage"
